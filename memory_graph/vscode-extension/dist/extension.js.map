{
  "version": 3,
  "sources": ["../src/graphGenerator.ts", "../src/extension.ts", "../src/pythonUtils.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\nconst writeFileAsync = promisify(fs.writeFile);\nconst unlinkAsync = promisify(fs.unlink);\n\nexport interface GraphGenerationOptions {\n    code: string;\n    pythonPath: string;\n    outputFormat: 'svg' | 'png';\n    visualizeType: 'locals' | 'stack';\n}\n\nexport interface GraphResult {\n    success: boolean;\n    outputPath?: string;\n    error?: string;\n}\n\n/**\n * Generate a memory graph from Python code\n */\nexport async function generateGraph(options: GraphGenerationOptions): Promise<GraphResult> {\n    const tempDir = os.tmpdir();\n    const timestamp = Date.now();\n    const scriptPath = path.join(tempDir, `memory_graph_temp_${timestamp}.py`);\n    const outputPath = path.join(tempDir, `memory_graph_output_${timestamp}.${options.outputFormat}`);\n\n    try {\n        // Create the Python script with memory_graph visualization\n        const wrappedCode = wrapCodeWithMemoryGraph(options.code, outputPath, options.visualizeType);\n        await writeFileAsync(scriptPath, wrappedCode, 'utf8');\n\n        // Execute the Python script\n        const { stdout, stderr } = await execAsync(\n            `${options.pythonPath} \"${scriptPath}\"`,\n            { timeout: 30000 } // 30 second timeout\n        );\n\n        // Check if output file was created\n        if (!fs.existsSync(outputPath)) {\n            return {\n                success: false,\n                error: `Output file not generated. stderr: ${stderr}`\n            };\n        }\n\n        // Clean up the temporary script\n        await unlinkAsync(scriptPath).catch(() => {});\n\n        return {\n            success: true,\n            outputPath: outputPath\n        };\n\n    } catch (error: any) {\n        // Clean up on error\n        await unlinkAsync(scriptPath).catch(() => {});\n        await unlinkAsync(outputPath).catch(() => {});\n\n        return {\n            success: false,\n            error: error.message || String(error)\n        };\n    }\n}\n\n/**\n * Wrap user code with memory_graph visualization commands\n */\nfunction wrapCodeWithMemoryGraph(\n    userCode: string,\n    outputPath: string,\n    visualizeType: 'locals' | 'stack'\n): string {\n    // Remove any existing mg.show(), mg.render(), mg.block() calls from user code\n    // This prevents conflicts with our wrapper code\n    const cleanedCode = userCode\n        .replace(/\\bmg\\.show\\([^)]*\\)/g, '# mg.show() removed by extension')\n        .replace(/\\bmg\\.render\\([^)]*\\)/g, '# mg.render() removed by extension')\n        .replace(/\\bmg\\.block\\([^)]*\\)/g, '# mg.block() removed by extension')\n        .replace(/\\bmemory_graph\\.show\\([^)]*\\)/g, '# memory_graph.show() removed')\n        .replace(/\\bmemory_graph\\.render\\([^)]*\\)/g, '# memory_graph.render() removed')\n        .replace(/\\bmemory_graph\\.block\\([^)]*\\)/g, '# memory_graph.block() removed');\n\n    // Escape the output path for Python\n    const escapedPath = outputPath.replace(/\\\\/g, '\\\\\\\\');\n\n    const template = `\nimport memory_graph as mg\nimport sys\n\n# User code starts here\n${cleanedCode}\n# User code ends here\n\n# Generate the graph\ntry:\n    if '${visualizeType}' == 'stack':\n        mg.render(mg.stack(), \"${escapedPath}\")\n    else:\n        mg.render(locals(), \"${escapedPath}\")\nexcept Exception as e:\n    print(f\"Error generating graph: {e}\", file=sys.stderr)\n    sys.exit(1)\n`;\n\n    return template;\n}\n\n/**\n * Clean up old temporary files\n */\nexport async function cleanupOldTempFiles(): Promise<void> {\n    const tempDir = os.tmpdir();\n    const files = fs.readdirSync(tempDir);\n    \n    const now = Date.now();\n    const oneHourAgo = now - (60 * 60 * 1000);\n\n    for (const file of files) {\n        if (file.startsWith('memory_graph_temp_') || file.startsWith('memory_graph_output_')) {\n            try {\n                const filePath = path.join(tempDir, file);\n                const stats = fs.statSync(filePath);\n                \n                // Delete files older than 1 hour\n                if (stats.mtimeMs < oneHourAgo) {\n                    await unlinkAsync(filePath);\n                }\n            } catch (error) {\n                // Ignore errors during cleanup\n            }\n        }\n    }\n}", "import * as vscode from 'vscode';\nimport { checkPythonEnvironment, showInstallationInstructions, PythonEnvironment } from './pythonUtils';\n\nlet pythonEnv: PythonEnvironment | null = null;\n\n/**\n * This method is called when the extension is activated\n * Activation happens when a Python file is opened\n */\nexport async function activate(context: vscode.ExtensionContext) {\n    console.log('Memory Graph extension is now active!');\n\n    // Clean up old temporary files\n    const { cleanupOldTempFiles } = await import('./graphGenerator');\n    cleanupOldTempFiles().catch((err: any) => console.log('Cleanup error:', err));\n\n    // Check Python environment on activation\n    try {\n        pythonEnv = await checkPythonEnvironment();\n        console.log('Python environment check:', pythonEnv);\n\n        // Show status in status bar\n        const statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Right,\n            100\n        );\n        \n        if (pythonEnv.hasMemoryGraph && pythonEnv.hasGraphviz) {\n            statusBarItem.text = \"$(check) Memory Graph\";\n            statusBarItem.tooltip = `Ready!\\nPython: ${pythonEnv.version}\\nmemory_graph: \u2713\\nGraphviz: \u2713`;\n            statusBarItem.backgroundColor = undefined;\n        } else {\n            statusBarItem.text = \"$(warning) Memory Graph\";\n            statusBarItem.tooltip = \"Missing dependencies - click for details\";\n            statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n            statusBarItem.command = 'memoryGraph.checkEnvironment';\n        }\n        \n        statusBarItem.show();\n        context.subscriptions.push(statusBarItem);\n\n        // Show installation instructions if needed\n        if (!pythonEnv.hasMemoryGraph || !pythonEnv.hasGraphviz) {\n            await showInstallationInstructions(pythonEnv);\n        } else {\n            vscode.window.showInformationMessage('Memory Graph extension loaded! \uD83C\uDF89');\n        }\n    } catch (error) {\n        console.error('Error checking Python environment:', error);\n        vscode.window.showErrorMessage('Memory Graph: Failed to detect Python environment');\n    }\n\n    // Register command: Check Environment\n    const checkEnvCommand = vscode.commands.registerCommand(\n        'memoryGraph.checkEnvironment',\n        async () => {\n            try {\n                pythonEnv = await checkPythonEnvironment();\n                \n                const status = `\nPython Environment Status:\n- Python: ${pythonEnv.pythonPath}\n- Version: ${pythonEnv.version}\n- memory_graph: ${pythonEnv.hasMemoryGraph ? '\u2713' : '\u2717'}\n- Graphviz: ${pythonEnv.hasGraphviz ? '\u2713' : '\u2717'}\n`;\n                \n                if (pythonEnv.hasMemoryGraph && pythonEnv.hasGraphviz) {\n                    vscode.window.showInformationMessage(\n                        'All dependencies are installed!',\n                        { modal: false, detail: status }\n                    );\n                } else {\n                    await showInstallationInstructions(pythonEnv);\n                }\n            } catch (error) {\n                vscode.window.showErrorMessage('Failed to check environment: ' + error);\n            }\n        }\n    );\n\n    // Register command: Visualize Selection\n    const visualizeCommand = vscode.commands.registerCommand(\n        'memoryGraph.visualize',\n        async () => {\n            const editor = vscode.window.activeTextEditor;\n            \n            if (!editor) {\n                vscode.window.showErrorMessage('No active editor found');\n                return;\n            }\n\n            // Check environment first\n            if (!pythonEnv) {\n                pythonEnv = await checkPythonEnvironment();\n            }\n\n            // Guard against null pythonEnv\n            if (!pythonEnv) {\n                vscode.window.showErrorMessage('Failed to detect Python environment');\n                return;\n            }\n\n            if (!pythonEnv.hasMemoryGraph) {\n                const action = await vscode.window.showErrorMessage(\n                    'memory_graph package not found',\n                    'Install Instructions'\n                );\n                if (action === 'Install Instructions') {\n                    await showInstallationInstructions(pythonEnv);\n                }\n                return;\n            }\n\n            if (!pythonEnv.hasGraphviz) {\n                const action = await vscode.window.showErrorMessage(\n                    'Graphviz not found',\n                    'Install Instructions'\n                );\n                if (action === 'Install Instructions') {\n                    await showInstallationInstructions(pythonEnv);\n                }\n                return;\n            }\n\n            const selection = editor.selection;\n            const selectedText = editor.document.getText(selection);\n\n            if (!selectedText) {\n                vscode.window.showWarningMessage('Please select some Python code to visualize');\n                return;\n            }\n\n            // Store pythonEnv for use in callback\n            const currentPythonEnv = pythonEnv;\n\n            // Show progress notification\n            await vscode.window.withProgress({\n                location: vscode.ProgressLocation.Notification,\n                title: \"Generating memory graph...\",\n                cancellable: false\n            }, async (progress) => {\n                progress.report({ increment: 0 });\n\n                // Import graph generator\n                const { generateGraph } = await import('./graphGenerator');\n                \n                // Get output format from settings\n                const config = vscode.workspace.getConfiguration('memoryGraph');\n                const outputFormat = config.get<'svg' | 'png'>('outputFormat', 'svg');\n\n                progress.report({ increment: 30, message: \"Running Python code...\" });\n\n                // Generate the graph\n                const result = await generateGraph({\n                    code: selectedText,\n                    pythonPath: currentPythonEnv.pythonPath,\n                    outputFormat: outputFormat,\n                    visualizeType: 'locals'\n                });\n\n                progress.report({ increment: 70 });\n\n                if (result.success && result.outputPath) {\n                    // Open the generated file\n                    const uri = vscode.Uri.file(result.outputPath);\n                    await vscode.commands.executeCommand('vscode.open', uri);\n                    \n                    vscode.window.showInformationMessage(\n                        `Memory graph generated successfully!`,\n                        'Open Again'\n                    ).then(selection => {\n                        if (selection === 'Open Again') {\n                            vscode.commands.executeCommand('vscode.open', uri);\n                        }\n                    });\n                } else {\n                    vscode.window.showErrorMessage(\n                        `Failed to generate graph: ${result.error}`\n                    );\n                }\n            });\n            \n            // TODO: Phase 2.2 - Display in webview panel instead of external viewer\n        }\n    );\n\n    // Register command: Open Panel\n    const openPanelCommand = vscode.commands.registerCommand(\n        'memoryGraph.openPanel',\n        () => {\n            vscode.window.showInformationMessage('Memory Graph Panel - Coming soon in Phase 2!');\n            // TODO: Phase 2.2 - We'll create the webview panel here\n        }\n    );\n\n    // Add commands to subscriptions for cleanup\n    context.subscriptions.push(checkEnvCommand);\n    context.subscriptions.push(visualizeCommand);\n    context.subscriptions.push(openPanelCommand);\n}\n\n/**\n * This method is called when the extension is deactivated\n */\nexport function deactivate() {\n    console.log('Memory Graph extension is now deactivated');\n}", "import * as vscode from 'vscode';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface PythonEnvironment {\n    pythonPath: string;\n    hasMemoryGraph: boolean;\n    hasGraphviz: boolean;\n    version: string;\n}\n\n/**\n * Get the Python interpreter path\n * First tries user setting, then VS Code's Python extension, then system default\n */\nexport async function getPythonPath(): Promise<string> {\n    // 1. Check user settings\n    const config = vscode.workspace.getConfiguration('memoryGraph');\n    const userPythonPath = config.get<string>('pythonPath');\n    if (userPythonPath) {\n        return userPythonPath;\n    }\n\n    // 2. Try to get from Python extension\n    try {\n        const pythonExtension = vscode.extensions.getExtension('ms-python.python');\n        if (pythonExtension) {\n            if (!pythonExtension.isActive) {\n                await pythonExtension.activate();\n            }\n            const pythonPath = pythonExtension.exports?.settings?.getExecutionDetails?.()?.execCommand?.[0];\n            if (pythonPath) {\n                return pythonPath;\n            }\n        }\n    } catch (error) {\n        console.log('Could not get Python from extension:', error);\n    }\n\n    // 3. Fall back to system Python\n    return 'python3';\n}\n\n/**\n * Check if memory_graph package is installed\n */\nexport async function checkMemoryGraph(pythonPath: string): Promise<boolean> {\n    try {\n        const { stdout } = await execAsync(`${pythonPath} -c \"import memory_graph; print('OK')\"`);\n        return stdout.trim() === 'OK';\n    } catch (error) {\n        return false;\n    }\n}\n\n/**\n * Check if Graphviz is installed\n */\nexport async function checkGraphviz(): Promise<boolean> {\n    try {\n        await execAsync('dot -V');\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\n/**\n * Get Python version\n */\nexport async function getPythonVersion(pythonPath: string): Promise<string> {\n    try {\n        const { stdout } = await execAsync(`${pythonPath} --version`);\n        return stdout.trim();\n    } catch (error) {\n        return 'Unknown';\n    }\n}\n\n/**\n * Check the entire Python environment\n */\nexport async function checkPythonEnvironment(): Promise<PythonEnvironment> {\n    const pythonPath = await getPythonPath();\n    const version = await getPythonVersion(pythonPath);\n    const hasMemoryGraph = await checkMemoryGraph(pythonPath);\n    const hasGraphviz = await checkGraphviz();\n\n    return {\n        pythonPath,\n        version,\n        hasMemoryGraph,\n        hasGraphviz\n    };\n}\n\n/**\n * Show installation instructions if components are missing\n */\nexport async function showInstallationInstructions(env: PythonEnvironment): Promise<void> {\n    const missing: string[] = [];\n\n    if (!env.hasMemoryGraph) {\n        missing.push('memory_graph Python package');\n    }\n    if (!env.hasGraphviz) {\n        missing.push('Graphviz');\n    }\n\n    if (missing.length === 0) {\n        return;\n    }\n\n    const message = `Missing dependencies: ${missing.join(', ')}`;\n    const action = await vscode.window.showWarningMessage(\n        message,\n        'Install Instructions',\n        'Dismiss'\n    );\n\n    if (action === 'Install Instructions') {\n        const instructions = `\n# Memory Graph Dependencies\n\n## Install memory_graph\n\\`\\`\\`bash\npip3 install memory_graph\n\\`\\`\\`\n\n## Install Graphviz\n**macOS (Homebrew):**\n\\`\\`\\`bash\nbrew install graphviz\n\\`\\`\\`\n\n**Linux (Ubuntu/Debian):**\n\\`\\`\\`bash\nsudo apt-get install graphviz\n\\`\\`\\`\n\n**Windows:**\nDownload from: https://graphviz.org/download/\n\n---\n\nPython: ${env.pythonPath}\nVersion: ${env.version}\n`;\n\n        const doc = await vscode.workspace.openTextDocument({\n            content: instructions,\n            language: 'markdown'\n        });\n        await vscode.window.showTextDocument(doc);\n    }\n}"],
  "mappings": "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",
  "names": ["graphGenerator_exports", "__export", "cleanupOldTempFiles", "generateGraph", "options", "tempDir", "timestamp", "scriptPath", "outputPath", "wrappedCode", "wrapCodeWithMemoryGraph", "writeFileAsync", "stdout", "stderr", "execAsync", "unlinkAsync", "error", "userCode", "visualizeType", "cleanedCode", "escapedPath", "files", "oneHourAgo", "file", "filePath", "fs", "path", "os", "import_child_process", "import_util", "init_graphGenerator", "__esmMin", "extension_exports", "__export", "activate", "deactivate", "__toCommonJS", "vscode", "vscode", "import_child_process", "import_util", "execAsync", "getPythonPath", "userPythonPath", "pythonExtension", "pythonPath", "error", "checkMemoryGraph", "stdout", "checkGraphviz", "getPythonVersion", "checkPythonEnvironment", "version", "hasMemoryGraph", "hasGraphviz", "showInstallationInstructions", "env", "missing", "message", "instructions", "doc", "pythonEnv", "activate", "context", "cleanupOldTempFiles", "err", "checkPythonEnvironment", "statusBarItem", "showInstallationInstructions", "error", "checkEnvCommand", "status", "visualizeCommand", "editor", "selection", "selectedText", "currentPythonEnv", "progress", "generateGraph", "outputFormat", "result", "uri", "openPanelCommand", "deactivate"]
}
