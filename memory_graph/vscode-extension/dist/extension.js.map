{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/pythonUtils.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport { checkPythonEnvironment, showInstallationInstructions, PythonEnvironment } from './pythonUtils';\n\nlet pythonEnv: PythonEnvironment | null = null;\n\n/**\n * This method is called when the extension is activated\n * Activation happens when a Python file is opened\n */\nexport async function activate(context: vscode.ExtensionContext) {\n    console.log('Memory Graph extension is now active!');\n\n    // Check Python environment on activation\n    try {\n        pythonEnv = await checkPythonEnvironment();\n        console.log('Python environment check:', pythonEnv);\n\n        // Show status in status bar\n        const statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Right,\n            100\n        );\n        \n        if (pythonEnv.hasMemoryGraph && pythonEnv.hasGraphviz) {\n            statusBarItem.text = \"$(check) Memory Graph\";\n            statusBarItem.tooltip = `Ready!\\nPython: ${pythonEnv.version}\\nmemory_graph: \u2713\\nGraphviz: \u2713`;\n            statusBarItem.backgroundColor = undefined;\n        } else {\n            statusBarItem.text = \"$(warning) Memory Graph\";\n            statusBarItem.tooltip = \"Missing dependencies - click for details\";\n            statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n            statusBarItem.command = 'memoryGraph.checkEnvironment';\n        }\n        \n        statusBarItem.show();\n        context.subscriptions.push(statusBarItem);\n\n        // Show installation instructions if needed\n        if (!pythonEnv.hasMemoryGraph || !pythonEnv.hasGraphviz) {\n            await showInstallationInstructions(pythonEnv);\n        } else {\n            vscode.window.showInformationMessage('Memory Graph extension loaded! \uD83C\uDF89');\n        }\n    } catch (error) {\n        console.error('Error checking Python environment:', error);\n        vscode.window.showErrorMessage('Memory Graph: Failed to detect Python environment');\n    }\n\n    // Register command: Check Environment\n    const checkEnvCommand = vscode.commands.registerCommand(\n        'memoryGraph.checkEnvironment',\n        async () => {\n            try {\n                pythonEnv = await checkPythonEnvironment();\n                \n                const status = `\nPython Environment Status:\n- Python: ${pythonEnv.pythonPath}\n- Version: ${pythonEnv.version}\n- memory_graph: ${pythonEnv.hasMemoryGraph ? '\u2713' : '\u2717'}\n- Graphviz: ${pythonEnv.hasGraphviz ? '\u2713' : '\u2717'}\n`;\n                \n                if (pythonEnv.hasMemoryGraph && pythonEnv.hasGraphviz) {\n                    vscode.window.showInformationMessage(\n                        'All dependencies are installed!',\n                        { modal: false, detail: status }\n                    );\n                } else {\n                    await showInstallationInstructions(pythonEnv);\n                }\n            } catch (error) {\n                vscode.window.showErrorMessage('Failed to check environment: ' + error);\n            }\n        }\n    );\n\n    // Register command: Visualize Selection\n    const visualizeCommand = vscode.commands.registerCommand(\n        'memoryGraph.visualize',\n        async () => {\n            const editor = vscode.window.activeTextEditor;\n            \n            if (!editor) {\n                vscode.window.showErrorMessage('No active editor found');\n                return;\n            }\n\n            // Check environment first\n            if (!pythonEnv) {\n                pythonEnv = await checkPythonEnvironment();\n            }\n\n            if (!pythonEnv.hasMemoryGraph) {\n                const action = await vscode.window.showErrorMessage(\n                    'memory_graph package not found',\n                    'Install Instructions'\n                );\n                if (action === 'Install Instructions') {\n                    await showInstallationInstructions(pythonEnv);\n                }\n                return;\n            }\n\n            if (!pythonEnv.hasGraphviz) {\n                const action = await vscode.window.showErrorMessage(\n                    'Graphviz not found',\n                    'Install Instructions'\n                );\n                if (action === 'Install Instructions') {\n                    await showInstallationInstructions(pythonEnv);\n                }\n                return;\n            }\n\n            const selection = editor.selection;\n            const selectedText = editor.document.getText(selection);\n\n            if (!selectedText) {\n                vscode.window.showWarningMessage('Please select some Python code to visualize');\n                return;\n            }\n\n            vscode.window.showInformationMessage(\n                `Memory Graph: Ready to visualize ${selectedText.length} characters`\n            );\n            \n            // TODO: Phase 2 - We'll implement actual visualization here\n        }\n    );\n\n    // Register command: Open Panel\n    const openPanelCommand = vscode.commands.registerCommand(\n        'memoryGraph.openPanel',\n        () => {\n            vscode.window.showInformationMessage('Memory Graph Panel - Coming soon in Phase 2!');\n            // TODO: Phase 2.2 - We'll create the webview panel here\n        }\n    );\n\n    // Add commands to subscriptions for cleanup\n    context.subscriptions.push(checkEnvCommand);\n    context.subscriptions.push(visualizeCommand);\n    context.subscriptions.push(openPanelCommand);\n}\n\n/**\n * This method is called when the extension is deactivated\n */\nexport function deactivate() {\n    console.log('Memory Graph extension is now deactivated');\n}", "import * as vscode from 'vscode';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface PythonEnvironment {\n    pythonPath: string;\n    hasMemoryGraph: boolean;\n    hasGraphviz: boolean;\n    version: string;\n}\n\n/**\n * Get the Python interpreter path\n * First tries user setting, then VS Code's Python extension, then system default\n */\nexport async function getPythonPath(): Promise<string> {\n    // 1. Check user settings\n    const config = vscode.workspace.getConfiguration('memoryGraph');\n    const userPythonPath = config.get<string>('pythonPath');\n    if (userPythonPath) {\n        return userPythonPath;\n    }\n\n    // 2. Try to get from Python extension\n    try {\n        const pythonExtension = vscode.extensions.getExtension('ms-python.python');\n        if (pythonExtension) {\n            if (!pythonExtension.isActive) {\n                await pythonExtension.activate();\n            }\n            const pythonPath = pythonExtension.exports?.settings?.getExecutionDetails?.()?.execCommand?.[0];\n            if (pythonPath) {\n                return pythonPath;\n            }\n        }\n    } catch (error) {\n        console.log('Could not get Python from extension:', error);\n    }\n\n    // 3. Fall back to system Python\n    return 'python3';\n}\n\n/**\n * Check if memory_graph package is installed\n */\nexport async function checkMemoryGraph(pythonPath: string): Promise<boolean> {\n    try {\n        const { stdout } = await execAsync(`${pythonPath} -c \"import memory_graph; print('OK')\"`);\n        return stdout.trim() === 'OK';\n    } catch (error) {\n        return false;\n    }\n}\n\n/**\n * Check if Graphviz is installed\n */\nexport async function checkGraphviz(): Promise<boolean> {\n    try {\n        await execAsync('dot -V');\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\n/**\n * Get Python version\n */\nexport async function getPythonVersion(pythonPath: string): Promise<string> {\n    try {\n        const { stdout } = await execAsync(`${pythonPath} --version`);\n        return stdout.trim();\n    } catch (error) {\n        return 'Unknown';\n    }\n}\n\n/**\n * Check the entire Python environment\n */\nexport async function checkPythonEnvironment(): Promise<PythonEnvironment> {\n    const pythonPath = await getPythonPath();\n    const version = await getPythonVersion(pythonPath);\n    const hasMemoryGraph = await checkMemoryGraph(pythonPath);\n    const hasGraphviz = await checkGraphviz();\n\n    return {\n        pythonPath,\n        version,\n        hasMemoryGraph,\n        hasGraphviz\n    };\n}\n\n/**\n * Show installation instructions if components are missing\n */\nexport async function showInstallationInstructions(env: PythonEnvironment): Promise<void> {\n    const missing: string[] = [];\n\n    if (!env.hasMemoryGraph) {\n        missing.push('memory_graph Python package');\n    }\n    if (!env.hasGraphviz) {\n        missing.push('Graphviz');\n    }\n\n    if (missing.length === 0) {\n        return;\n    }\n\n    const message = `Missing dependencies: ${missing.join(', ')}`;\n    const action = await vscode.window.showWarningMessage(\n        message,\n        'Install Instructions',\n        'Dismiss'\n    );\n\n    if (action === 'Install Instructions') {\n        const instructions = `\n# Memory Graph Dependencies\n\n## Install memory_graph\n\\`\\`\\`bash\npip3 install memory_graph\n\\`\\`\\`\n\n## Install Graphviz\n**macOS (Homebrew):**\n\\`\\`\\`bash\nbrew install graphviz\n\\`\\`\\`\n\n**Linux (Ubuntu/Debian):**\n\\`\\`\\`bash\nsudo apt-get install graphviz\n\\`\\`\\`\n\n**Windows:**\nDownload from: https://graphviz.org/download/\n\n---\n\nPython: ${env.pythonPath}\nVersion: ${env.version}\n`;\n\n        const doc = await vscode.workspace.openTextDocument({\n            content: instructions,\n            language: 'markdown'\n        });\n        await vscode.window.showTextDocument(doc);\n    }\n}"],
  "mappings": "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",
  "names": ["extension_exports", "__export", "activate", "deactivate", "__toCommonJS", "vscode", "vscode", "import_child_process", "import_util", "execAsync", "getPythonPath", "userPythonPath", "pythonExtension", "pythonPath", "error", "checkMemoryGraph", "stdout", "checkGraphviz", "getPythonVersion", "checkPythonEnvironment", "version", "hasMemoryGraph", "hasGraphviz", "showInstallationInstructions", "env", "missing", "message", "instructions", "doc", "pythonEnv", "activate", "context", "checkPythonEnvironment", "statusBarItem", "showInstallationInstructions", "error", "checkEnvCommand", "status", "visualizeCommand", "editor", "selection", "selectedText", "openPanelCommand", "deactivate"]
}
